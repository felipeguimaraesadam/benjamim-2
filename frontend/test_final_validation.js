// TESTE FINAL DE VALIDA√á√ÉO - AP√ìS CORRE√á√ÉO DO BUG CR√çTICO
// Execute este script no console do navegador em /compras/nova

console.log('üîß TESTE FINAL DE VALIDA√á√ÉO - AP√ìS CORRE√á√ÉO');
console.log('===============================================');

// Fun√ß√£o para testar a valida√ß√£o completa
function testValidationFinal() {
    console.log('\nüß™ INICIANDO TESTE FINAL...');
    
    // 1. Capturar o formul√°rio
    const form = document.querySelector('form');
    if (!form) {
        console.error('‚ùå Formul√°rio n√£o encontrado!');
        return;
    }
    
    // 2. Preencher dados b√°sicos do cabe√ßalho
    const dataCompra = document.querySelector('input[type="date"]');
    const obraSelect = document.querySelector('select');
    
    if (dataCompra) {
        dataCompra.value = '2025-01-22';
        dataCompra.dispatchEvent(new Event('change', { bubbles: true }));
        console.log('‚úÖ Data da compra preenchida');
    }
    
    if (obraSelect && obraSelect.options.length > 1) {
        obraSelect.selectedIndex = 1;
        obraSelect.dispatchEvent(new Event('change', { bubbles: true }));
        console.log('‚úÖ Obra selecionada');
    }
    
    // 3. Preencher um item v√°lido
    setTimeout(() => {
        const materialInput = document.querySelector('input[placeholder*="material"], input[placeholder*="Material"]');
        const qtdInput = document.querySelector('input[placeholder*="quantidade"], input[placeholder*="Quantidade"]');
        const valorInput = document.querySelector('input[placeholder*="valor"], input[placeholder*="Valor"]');
        
        if (materialInput) {
            materialInput.value = 'CIMENTO 50KG';
            materialInput.dispatchEvent(new Event('input', { bubbles: true }));
            materialInput.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('‚úÖ Material preenchido');
        }
        
        if (qtdInput) {
            qtdInput.value = '10';
            qtdInput.dispatchEvent(new Event('input', { bubbles: true }));
            qtdInput.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('‚úÖ Quantidade preenchida');
        }
        
        if (valorInput) {
            valorInput.value = '25.50';
            valorInput.dispatchEvent(new Event('input', { bubbles: true }));
            valorInput.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('‚úÖ Valor unit√°rio preenchido');
        }
        
        // 4. Testar salvamento com dados v√°lidos
        setTimeout(() => {
            console.log('\nüéØ TESTE 1: Salvamento com dados v√°lidos');
            const saveBtn = document.querySelector('button[type="submit"], button:contains("Salvar")');
            if (saveBtn) {
                console.log('üìù Tentando salvar com dados v√°lidos...');
                saveBtn.click();
                
                setTimeout(() => {
                    const errorMsg = document.querySelector('.error, .alert-danger, [class*="error"]');
                    if (errorMsg && errorMsg.textContent.includes('pelo menos um item')) {
                        console.error('‚ùå FALHA: Ainda mostra erro de valida√ß√£o com dados v√°lidos!');
                        console.error('Erro encontrado:', errorMsg.textContent);
                    } else {
                        console.log('‚úÖ SUCESSO: N√£o h√° erro de valida√ß√£o com dados v√°lidos!');
                    }
                }, 1000);
            }
        }, 1000);
        
    }, 500);
}

// Fun√ß√£o para testar sem itens
function testWithoutItems() {
    console.log('\nüéØ TESTE 2: Valida√ß√£o sem itens');
    
    // Limpar todos os campos de itens
    const inputs = document.querySelectorAll('input[placeholder*="material"], input[placeholder*="quantidade"], input[placeholder*="valor"]');
    inputs.forEach(input => {
        input.value = '';
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
    });
    
    setTimeout(() => {
        const saveBtn = document.querySelector('button[type="submit"], button:contains("Salvar")');
        if (saveBtn) {
            console.log('üìù Tentando salvar sem itens...');
            saveBtn.click();
            
            setTimeout(() => {
                const errorMsg = document.querySelector('.error, .alert-danger, [class*="error"]');
                if (errorMsg && errorMsg.textContent.includes('pelo menos um item')) {
                    console.log('‚úÖ SUCESSO: Valida√ß√£o bloqueia salvamento sem itens!');
                } else {
                    console.error('‚ùå FALHA: Deveria mostrar erro ao tentar salvar sem itens!');
                }
            }, 1000);
        }
    }, 500);
}

// Executar testes
console.log('\nüöÄ EXECUTANDO TESTES FINAIS...');
console.log('1. Execute: testValidationFinal() - para testar com dados v√°lidos');
console.log('2. Execute: testWithoutItems() - para testar sem itens');

// Disponibilizar fun√ß√µes globalmente
window.testValidationFinal = testValidationFinal;
window.testWithoutItems = testWithoutItems;

console.log('\nüéØ OBJETIVO: Verificar se a corre√ß√£o do bug items.indexOf(item) funcionou!');