// DEBUGGING CR√çTICO - PROBLEMA IDENTIFICADO!
// Execute no console do navegador na p√°gina /compras/nova

console.log('üö® DEBUGGING CR√çTICO - PROBLEMA IDENTIFICADO!');
console.log('=' .repeat(60));

// Fun√ß√£o para testar a valida√ß√£o real
function testValidationLogic() {
    console.log('üîç TESTANDO L√ìGICA DE VALIDA√á√ÉO...');
    
    // Simular um item v√°lido
    const itemTeste = {
        material: { id: 1 },
        materialId: '1',
        quantidade: '10',
        valorUnitario: '5.50'
    };
    
    console.log('üì¶ ITEM DE TESTE:', itemTeste);
    
    // Testar as condi√ß√µes de valida√ß√£o
    const hasMaterial = !!(itemTeste.material && itemTeste.material.id) || !!(itemTeste.materialId && String(itemTeste.materialId).trim());
    const hasQuantidade = !!(itemTeste.quantidade && String(itemTeste.quantidade).trim());
    const hasValorUnitario = !!(itemTeste.valorUnitario && String(itemTeste.valorUnitario).trim());
    
    console.log('‚úÖ VERIFICA√á√ïES:');
    console.log('   Material v√°lido:', hasMaterial);
    console.log('   Quantidade v√°lida:', hasQuantidade);
    console.log('   Valor v√°lido:', hasValorUnitario);
    console.log('   Item tem dados:', hasMaterial || hasQuantidade || hasValorUnitario);
    
    // Simular validateField para material
    const materialValid = !!(itemTeste.material && itemTeste.material.id) || !!(itemTeste.materialId && String(itemTeste.materialId).trim());
    const quantidadeStr = String(itemTeste.quantidade || '').replace(',', '.').trim();
    const quantidadeValid = quantidadeStr !== '' && !isNaN(parseFloat(quantidadeStr)) && parseFloat(quantidadeStr) > 0;
    const valorStr = String(itemTeste.valorUnitario || '').replace(',', '.').trim();
    const valorValid = valorStr !== '' && !isNaN(parseFloat(valorStr)) && parseFloat(valorStr) >= 0;
    
    console.log('üéØ VALIDA√á√ïES INDIVIDUAIS:');
    console.log('   Material:', materialValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO');
    console.log('   Quantidade:', quantidadeValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO');
    console.log('   Valor:', valorValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO');
    
    const itemCompleto = materialValid && quantidadeValid && valorValid;
    console.log('üèÜ ITEM COMPLETO:', itemCompleto ? '‚úÖ SIM' : '‚ùå N√ÉO');
    
    return itemCompleto;
}

// Fun√ß√£o para interceptar o submit real
function interceptRealSubmit() {
    console.log('üéØ INTERCEPTANDO SUBMIT REAL...');
    
    const form = document.querySelector('form');
    if (form) {
        form.addEventListener('submit', function(e) {
            console.log('üö® SUBMIT INTERCEPTADO!');
            e.preventDefault(); // Prevenir submit para debugging
            
            // Capturar todos os inputs de material
            const materialInputs = document.querySelectorAll('input[placeholder*="material"], input[placeholder*="Material"]');
            const quantidadeInputs = document.querySelectorAll('input[type="number"]');
            
            console.log('üìã INPUTS ENCONTRADOS:');
            console.log('   Materiais:', materialInputs.length);
            console.log('   Quantidades:', quantidadeInputs.length);
            
            // Analisar cada linha de item
            const linhas = document.querySelectorAll('tbody tr');
            console.log('üìä LINHAS DE ITENS:', linhas.length);
            
            const itensAnalisados = [];
            linhas.forEach((linha, index) => {
                const materialInput = linha.querySelector('input[placeholder*="material"], input[placeholder*="Material"]');
                const quantidadeInput = linha.querySelector('input[type="number"]');
                const valorInputs = linha.querySelectorAll('input[type="number"]');
                const valorInput = valorInputs[1]; // Segundo input number √© o valor
                
                if (materialInput || quantidadeInput || valorInput) {
                    const item = {
                        linha: index,
                        material: materialInput ? materialInput.value : '',
                        quantidade: quantidadeInput ? quantidadeInput.value : '',
                        valor: valorInput ? valorInput.value : ''
                    };
                    
                    // Aplicar a mesma l√≥gica de valida√ß√£o
                    const hasMaterial = item.material && item.material.trim() !== '';
                    const hasQuantidade = item.quantidade && item.quantidade.trim() !== '';
                    const hasValor = item.valor && item.valor.trim() !== '';
                    
                    const temDados = hasMaterial || hasQuantidade || hasValor;
                    
                    if (temDados) {
                        // Validar se todos os campos est√£o preenchidos
                        const materialOk = hasMaterial;
                        const quantidadeOk = hasQuantidade && !isNaN(parseFloat(item.quantidade)) && parseFloat(item.quantidade) > 0;
                        const valorOk = hasValor && !isNaN(parseFloat(item.valor)) && parseFloat(item.valor) >= 0;
                        
                        const itemValido = materialOk && quantidadeOk && valorOk;
                        
                        console.log(`üì¶ ITEM ${index}:`, {
                            material: item.material,
                            quantidade: item.quantidade,
                            valor: item.valor,
                            materialOk,
                            quantidadeOk,
                            valorOk,
                            itemValido
                        });
                        
                        itensAnalisados.push({
                            ...item,
                            valido: itemValido
                        });
                    }
                }
            });
            
            const itensValidos = itensAnalisados.filter(item => item.valido);
            
            console.log('üìä RESULTADO FINAL:');
            console.log('   Total de itens com dados:', itensAnalisados.length);
            console.log('   Itens v√°lidos:', itensValidos.length);
            console.log('   Detalhes dos itens v√°lidos:', itensValidos);
            
            if (itensValidos.length === 0) {
                console.log('‚ùå PROBLEMA: Nenhum item v√°lido encontrado!');
                console.log('üîß POSS√çVEIS CAUSAS:');
                console.log('   1. Campos n√£o est√£o sendo preenchidos corretamente');
                console.log('   2. Valida√ß√£o est√° muito restritiva');
                console.log('   3. Seletores de DOM est√£o incorretos');
            } else {
                console.log('‚úÖ ITENS V√ÅLIDOS ENCONTRADOS - DEVERIA FUNCIONAR!');
            }
            
            // Permitir que o submit continue ap√≥s an√°lise
            setTimeout(() => {
                console.log('üöÄ PERMITINDO SUBMIT CONTINUAR...');
                form.removeEventListener('submit', arguments.callee);
                form.submit();
            }, 2000);
        });
        
        console.log('‚úÖ INTERCEPTOR DE SUBMIT CONFIGURADO!');
    } else {
        console.log('‚ùå FORMUL√ÅRIO N√ÉO ENCONTRADO!');
    }
}

// Executar testes
console.log('üß™ EXECUTANDO TESTES...');
testValidationLogic();
interceptRealSubmit();

console.log('=' .repeat(60));
console.log('‚úÖ DEBUGGING CONFIGURADO!');
console.log('üìã PR√ìXIMOS PASSOS:');
console.log('   1. Preencha o formul√°rio com dados v√°lidos');
console.log('   2. Clique em "Salvar"');
console.log('   3. Observe a an√°lise detalhada no console');
console.log('=' .repeat(60));