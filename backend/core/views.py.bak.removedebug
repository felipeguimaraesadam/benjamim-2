from rest_framework import viewsets, status, filters, permissions
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.views import APIView
from rest_framework.response import Response
from django.db.models import Q, Sum, F, Case, When, Value, IntegerField
from decimal import Decimal
from datetime import datetime, date, timedelta
from django.db import transaction
from rest_framework.decorators import action
from django.utils import timezone
# Note: 'from datetime import date, timedelta' was also imported directly.
# django.utils.timezone.now().date() provides date, and timedelta can be imported if needed.
# For this merge, keeping existing imports from backup unless clearly redundant and conflicting.

# PDF Generation Specific Imports
from django.http import HttpResponse, Http404 # Http404 added, HttpResponse was present
from django.template.loader import render_to_string # Was present
from django.conf import settings
import os
from weasyprint import HTML, CSS
# from weasyprint.fonts import FontConfiguration # Optional

from .models import Usuario, Obra, Funcionario, Equipe, Locacao_Obras_Equipes, Material, Compra, Despesa_Extra, Ocorrencia_Funcionario, ItemCompra, FotoObra
from .serializers import (
    UsuarioSerializer, ObraSerializer, FuncionarioSerializer, EquipeSerializer,
    LocacaoObrasEquipesSerializer, MaterialSerializer, CompraSerializer,
    DespesaExtraSerializer, OcorrenciaFuncionarioSerializer,
    ItemCompraSerializer,
    FotoObraSerializer, FuncionarioDetailSerializer,
    EquipeDetailSerializer, MaterialDetailSerializer, CompraReportSerializer
)
from .permissions import IsNivelAdmin, IsNivelGerente
# django.db.models.Sum, Count, F, Decimal are already imported in the backup content

class UsuarioViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to be viewed or edited.
    """
    queryset = Usuario.objects.all().order_by('id')
    serializer_class = UsuarioSerializer
    permission_classes = [IsNivelAdmin] # Using custom permission


class ObraViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows obras to be viewed or edited.
    """
    queryset = Obra.objects.all()
    serializer_class = ObraSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]


class FuncionarioViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows funcionarios to be viewed or edited.
    """
    queryset = Funcionario.objects.all()
    serializer_class = FuncionarioSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]


# New FuncionarioDetailView
class FuncionarioDetailView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente] # Or more specific permissions

    def get(self, request, pk, format=None):
        try:
            funcionario = Funcionario.objects.get(pk=pk)
        except Funcionario.DoesNotExist:
            return Response({"error": "Funcionário não encontrado."}, status=status.HTTP_404_NOT_FOUND)

        serializer = FuncionarioDetailSerializer(funcionario, context={'request': request})
        return Response(serializer.data)


class EquipeViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows equipes to be viewed or edited.
    """
    queryset = Equipe.objects.all()
    serializer_class = EquipeSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]


# New EquipeDetailView
class EquipeDetailView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]

    def get(self, request, pk, format=None):
        try:
            equipe = Equipe.objects.prefetch_related('membros').select_related('lider').get(pk=pk)
        except Equipe.DoesNotExist:
            return Response({"error": "Equipe não encontrada."}, status=status.HTTP_404_NOT_FOUND)

        serializer = EquipeDetailSerializer(equipe, context={'request': request})
        return Response(serializer.data)


class LocacaoObrasEquipesViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows alocacoes to be viewed or edited.
    """
    queryset = Locacao_Obras_Equipes.objects.all()
    serializer_class = LocacaoObrasEquipesSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]

    def get_queryset(self):
        today = timezone.now().date()
        queryset = Locacao_Obras_Equipes.objects.annotate(
            status_order_group=Case(
                When(status_locacao='cancelada', then=Value(3)),
                When(Q(status_locacao='ativa') &
                     Q(data_locacao_inicio__lte=today) &
                     (Q(data_locacao_fim__gte=today) | Q(data_locacao_fim__isnull=True)),
                     then=Value(0)),
                When(Q(status_locacao='ativa') & Q(data_locacao_inicio__gt=today),
                     then=Value(1)),
                When(Q(status_locacao='ativa') & Q(data_locacao_fim__lt=today),
                     then=Value(2)),
                default=Value(2),
                output_field=IntegerField()
            )
        ).order_by('status_order_group', 'data_locacao_inicio')
        obra_id = self.request.query_params.get('obra_id')
        if obra_id is not None:
            queryset = queryset.filter(obra_id=obra_id)
        return queryset

    @action(detail=False, methods=['post'], url_path='transferir-funcionario')
    def transfer_funcionario(self, request):
        conflicting_locacao_id = request.data.get('conflicting_locacao_id')
        new_locacao_data = request.data.get('new_locacao_data')
        if not conflicting_locacao_id or not new_locacao_data:
            return Response(
                {"error": "Dados insuficientes para transferência (conflicting_locacao_id e new_locacao_data são obrigatórios)."},
                status=status.HTTP_400_BAD_REQUEST
            )
        try:
            with transaction.atomic():
                try:
                    old_loc = Locacao_Obras_Equipes.objects.get(pk=conflicting_locacao_id)
                except Locacao_Obras_Equipes.DoesNotExist:
                    return Response({"error": "Locação conflitante não encontrada."}, status=status.HTTP_404_NOT_FOUND)
                if 'funcionario_locado' in new_locacao_data and isinstance(new_locacao_data['funcionario_locado'], str):
                    try:
                        new_locacao_data['funcionario_locado'] = int(new_locacao_data['funcionario_locado'])
                    except ValueError:
                        return Response({"error": "ID de funcionário inválido."}, status=status.HTTP_400_BAD_REQUEST)
                if 'obra' in new_locacao_data and isinstance(new_locacao_data['obra'], str):
                    try:
                        new_locacao_data['obra'] = int(new_locacao_data['obra'])
                    except ValueError:
                            return Response({"error": "ID de obra inválido."}, status=status.HTTP_400_BAD_REQUEST)
                new_loc_start_date_str = new_locacao_data.get('data_locacao_inicio')
                if not new_loc_start_date_str:
                    return Response({"error": "Data de início da nova locação é obrigatória."}, status=status.HTTP_400_BAD_REQUEST)
                try:
                    new_loc_start_date = date.fromisoformat(new_loc_start_date_str)
                except ValueError:
                    return Response({"error": "Formato de data de início da nova locação inválido. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)
                old_loc_new_end_date = new_loc_start_date - timedelta(days=1)
                if old_loc_new_end_date < old_loc.data_locacao_inicio:
                    old_loc.data_locacao_fim = old_loc_new_end_date
                    old_loc.valor_pagamento = Decimal('0.00')
                else:
                    old_loc.data_locacao_fim = old_loc_new_end_date
                    old_loc.valor_pagamento = Decimal('0.00')
                old_loc.status_locacao = 'cancelada'
                old_loc.save()
                new_loc_serializer = self.get_serializer(data=new_locacao_data)
                if not new_loc_serializer.is_valid():
                        return Response(new_loc_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
                new_loc = new_loc_serializer.save()
                return Response(self.get_serializer(new_loc).data, status=status.HTTP_201_CREATED)
        except Exception as e:
            return Response({"error": f"Erro interno no servidor: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'], url_path='custo_diario_chart')
    def custo_diario_chart(self, request):
        today = timezone.now().date()
        start_date = today - timedelta(days=29)
        obra_id_str = request.query_params.get('obra_id')
        locacoes_qs = Locacao_Obras_Equipes.objects.filter(
            data_locacao_inicio__gte=start_date,
            data_locacao_inicio__lte=today,
            status_locacao='ativa'
        )
        if obra_id_str:
            try:
                obra_id = int(obra_id_str)
                locacoes_qs = locacoes_qs.filter(obra_id=obra_id)
            except ValueError:
                return Response({"error": "ID de obra inválido."}, status=status.HTTP_400_BAD_REQUEST)
        daily_costs_db = locacoes_qs.values('data_locacao_inicio').annotate(
            total_cost_for_day=Sum('valor_pagamento')
        ).order_by('data_locacao_inicio')
        costs_by_date_map = {
            item['data_locacao_inicio']: item['total_cost_for_day']
            for item in daily_costs_db
        }
        result_data = []
        current_date = start_date
        while current_date <= today:
            cost = costs_by_date_map.get(current_date, Decimal('0.00'))
            result_data.append({
                "date": current_date.isoformat(),
                "total_cost": cost,
                "has_locacoes": cost > 0
            })
            current_date += timedelta(days=1)
        return Response(result_data)


class MaterialViewSet(viewsets.ModelViewSet):
    queryset = Material.objects.all().order_by('nome')
    serializer_class = MaterialSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    filter_backends = [filters.SearchFilter]
    search_fields = ['nome']

    @action(detail=False, methods=['get'], url_path='alertas-estoque-baixo')
    def alertas_estoque_baixo(self, request):
        low_stock_materials = Material.objects.filter(
            nivel_minimo_estoque__gt=0,
            quantidade_em_estoque__lte=F('nivel_minimo_estoque')
        )
        serializer = self.get_serializer(low_stock_materials, many=True)
        return Response(serializer.data)


class MaterialDetailAPIView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, pk, format=None):
        try:
            material_instance = Material.objects.get(pk=pk)
        except Material.DoesNotExist:
            return Response({"error": "Material não encontrado."}, status=status.HTTP_404_NOT_FOUND)
        serializer = MaterialDetailSerializer(material_instance, context={'request': request})
        return Response(serializer.data)


class CompraViewSet(viewsets.ModelViewSet):
    serializer_class = CompraSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        validated_data = serializer.validated_data
        itens_data = validated_data.pop('itens')
        compra = Compra.objects.create(**validated_data)
        for item_data in itens_data:
            item = ItemCompra.objects.create(compra=compra, **item_data)
            material_obj = item_data.get('material')
            categoria_uso = item_data.get('categoria_uso')
            if categoria_uso and material_obj and isinstance(material_obj, Material):
                material_obj.categoria_uso_padrao = categoria_uso
                material_obj.save(update_fields=['categoria_uso_padrao'])
        total_bruto_calculado = sum(item.valor_total_item for item in compra.itens.all())
        compra.valor_total_bruto = total_bruto_calculado if total_bruto_calculado is not None else Decimal('0.00')
        compra.save()
        final_serializer = CompraSerializer(compra, context=self.get_serializer_context())
        headers = self.get_success_headers(final_serializer.data)
        return Response(final_serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def get_queryset(self):
        queryset = Compra.objects.all().select_related('obra').order_by('-data_compra')
        obra_id = self.request.query_params.get('obra_id')
        if obra_id:
            queryset = queryset.filter(obra_id=obra_id)
        data_inicio_str = self.request.query_params.get('data_inicio')
        if data_inicio_str:
            try:
                data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
                queryset = queryset.filter(data_compra__gte=data_inicio)
            except ValueError: pass
        data_fim_str = self.request.query_params.get('data_fim')
        if data_fim_str:
            try:
                data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
                queryset = queryset.filter(data_compra__lte=data_fim)
            except ValueError: pass
        fornecedor = self.request.query_params.get('fornecedor')
        if fornecedor:
            queryset = queryset.filter(fornecedor__icontains=fornecedor)
        return queryset

    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        instance.obra_id = request.data.get('obra', instance.obra_id)
        instance.fornecedor = request.data.get('fornecedor', instance.fornecedor)
        instance.data_compra = request.data.get('data_compra', instance.data_compra)
        instance.nota_fiscal = request.data.get('nota_fiscal', instance.nota_fiscal)
        desconto_str = request.data.get('desconto', str(instance.desconto))
        try:
            instance.desconto = Decimal(desconto_str)
        except ValueError:
            instance.desconto = instance.desconto
        instance.observacoes = request.data.get('observacoes', instance.observacoes)
        itens_data = request.data.get('itens', None)
        if itens_data is not None:
            existing_items_ids = set(instance.itens.values_list('id', flat=True))
            request_items_ids = set()
            for item_data in itens_data:
                item_id = item_data.get('id', None)
                material_id = item_data.get('material')
                categoria_uso = item_data.get('categoria_uso')
                try:
                    quantidade_str = item_data.get('quantidade', '0')
                    quantidade = Decimal(quantidade_str)
                    valor_unitario_str = item_data.get('valor_unitario', '0')
                    valor_unitario = Decimal(valor_unitario_str)
                except ValueError as e: continue
                material_obj = None
                if material_id:
                    try:
                        material_obj = Material.objects.get(id=material_id)
                    except Material.DoesNotExist: continue
                else: continue
                if item_id:
                    if item_id in existing_items_ids:
                        try:
                            item_instance = ItemCompra.objects.get(id=item_id, compra=instance)
                            item_instance.material = material_obj
                            item_instance.quantidade = quantidade
                            item_instance.valor_unitario = valor_unitario
                            if categoria_uso is not None:
                                item_instance.categoria_uso = categoria_uso
                            item_instance.save()
                            request_items_ids.add(item_id)
                        except ItemCompra.DoesNotExist: continue
                    else: continue
                else:
                    if not material_obj: continue
                    item_instance_data = {
                        'compra': instance, 'material': material_obj,
                        'quantidade': quantidade, 'valor_unitario': valor_unitario
                    }
                    if categoria_uso is not None:
                        item_instance_data['categoria_uso'] = categoria_uso
                    item_instance = ItemCompra.objects.create(**item_instance_data)
                    request_items_ids.add(item_instance.id)
                if categoria_uso and material_obj:
                    material_obj.categoria_uso_padrao = categoria_uso
                    material_obj.save(update_fields=['categoria_uso_padrao'])
            ids_to_delete = existing_items_ids - request_items_ids
            if ids_to_delete:
                ItemCompra.objects.filter(id__in=ids_to_delete, compra=instance).delete()
        all_current_items = instance.itens.all()
        total_bruto_calculado = sum(item.valor_total_item for item in all_current_items if item.valor_total_item is not None)
        instance.valor_total_bruto = total_bruto_calculado if total_bruto_calculado is not None else Decimal('0.00')
        instance.save()
        serializer = self.get_serializer(instance)
        return Response(serializer.data)


class DespesaExtraViewSet(viewsets.ModelViewSet):
    serializer_class = DespesaExtraSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get_queryset(self):
        queryset = Despesa_Extra.objects.all().order_by('-data')
        obra_id = self.request.query_params.get('obra_id')
        if obra_id:
            queryset = queryset.filter(obra_id=obra_id)
        return queryset


class OcorrenciaFuncionarioViewSet(viewsets.ModelViewSet):
    queryset = Ocorrencia_Funcionario.objects.all()
    serializer_class = OcorrenciaFuncionarioSerializer
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get_queryset(self):
        queryset = Ocorrencia_Funcionario.objects.all().select_related('funcionario').order_by('-data')
        data_inicio_str = self.request.query_params.get('data_inicio')
        data_fim_str = self.request.query_params.get('data_fim')
        funcionario_id_str = self.request.query_params.get('funcionario_id')
        tipo_ocorrencia_str = self.request.query_params.get('tipo')
        if data_inicio_str:
            try:
                data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
                queryset = queryset.filter(data__gte=data_inicio)
            except ValueError: pass
        if data_fim_str:
            try:
                data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
                queryset = queryset.filter(data__lte=data_fim)
            except ValueError: pass
        if funcionario_id_str:
            try:
                funcionario_id = int(funcionario_id_str)
                queryset = queryset.filter(funcionario_id=funcionario_id)
            except ValueError: pass
        if tipo_ocorrencia_str:
            queryset = queryset.filter(tipo=tipo_ocorrencia_str)
        return queryset


# Reports Views
class RelatorioFinanceiroObraView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, *args, **kwargs):
        obra_id = request.query_params.get('obra_id')
        data_inicio_str = request.query_params.get('data_inicio')
        data_fim_str = request.query_params.get('data_fim')
        if not all([obra_id, data_inicio_str, data_fim_str]):
            return Response({"error": "Parâmetros obra_id, data_inicio e data_fim são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            obra_id = int(obra_id)
            data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
            data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
        except ValueError:
            return Response({"error": "Formato inválido para obra_id ou datas (esperado YYYY-MM-DD)."}, status=status.HTTP_400_BAD_REQUEST)
        if data_inicio > data_fim:
            return Response({"error": "A data_inicio não pode ser posterior à data_fim."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            obra = Obra.objects.get(pk=obra_id)
        except Obra.DoesNotExist:
            return Response({"error": f"Obra com id {obra_id} não encontrada."}, status=status.HTTP_404_NOT_FOUND)
        compras = Compra.objects.filter(obra_id=obra_id, data_compra__gte=data_inicio, data_compra__lte=data_fim)
        despesas_extras = Despesa_Extra.objects.filter(obra_id=obra_id, data__gte=data_inicio, data__lte=data_fim)
        total_compras = compras.aggregate(total=Sum('valor_total_liquido'))['total'] or Decimal('0.00')
        total_despesas_extras = despesas_extras.aggregate(total=Sum('valor'))['total'] or Decimal('0.00')
        custo_total_geral = total_compras + total_despesas_extras
        return Response({
            "obra_id": obra_id, "nome_obra": obra.nome_obra,
            "data_inicio": data_inicio_str, "data_fim": data_fim_str,
            "total_compras": total_compras, "total_despesas_extras": total_despesas_extras,
            "custo_total_geral": custo_total_geral
        })

class RelatorioGeralComprasView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, *args, **kwargs):
        data_inicio_str = request.query_params.get('data_inicio')
        data_fim_str = request.query_params.get('data_fim')
        obra_id_str = request.query_params.get('obra_id')
        if not all([data_inicio_str, data_fim_str]):
            return Response({"error": "Parâmetros data_inicio e data_fim são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
            data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
        except ValueError:
            return Response({"error": "Formato inválido para datas (esperado YYYY-MM-DD)."}, status=status.HTTP_400_BAD_REQUEST)
        if data_inicio > data_fim:
            return Response({"error": "A data_inicio não pode ser posterior à data_fim."}, status=status.HTTP_400_BAD_REQUEST)
        filters = Q(data_compra__gte=data_inicio) & Q(data_compra__lte=data_fim)
        applied_filters_echo = {"data_inicio": data_inicio_str, "data_fim": data_fim_str}
        if obra_id_str:
            try:
                obra_id = int(obra_id_str)
                filters &= Q(obra_id=obra_id)
                applied_filters_echo["obra_id"] = obra_id
            except ValueError:
                return Response({"error": "obra_id deve ser um número inteiro."}, status=status.HTTP_400_BAD_REQUEST)
        fornecedor_param = request.query_params.get('fornecedor')
        if fornecedor_param:
            filters &= Q(fornecedor__icontains=fornecedor_param)
            applied_filters_echo["fornecedor"] = fornecedor_param
        compras_qs = Compra.objects.filter(filters).distinct()
        soma_total_compras = compras_qs.aggregate(total=Sum('valor_total_liquido'))['total'] or Decimal('0.00')
        serializer = CompraSerializer(compras_qs, many=True)
        return Response({
            "filtros": applied_filters_echo, "soma_total_compras": soma_total_compras,
            "compras": serializer.data
        })

from django.db.models import Sum, Count, F, DecimalField # django.utils.timezone already imported

class DashboardStatsView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, *args, **kwargs):
        obras_em_andamento = Obra.objects.filter(status='Em Andamento').count()
        current_month = timezone.now().month
        current_year = timezone.now().year
        custo_compras_mes = Compra.objects.filter(data_compra__year=current_year, data_compra__month=current_month).aggregate(total=Sum('valor_total_liquido'))['total'] or Decimal('0.00')
        custo_despesas_extras_mes = Despesa_Extra.objects.filter(data__year=current_year, data__month=current_month).aggregate(total=Sum('valor'))['total'] or Decimal('0.00')
        custo_total_mes_corrente = custo_compras_mes + custo_despesas_extras_mes
        total_funcionarios = Funcionario.objects.count()
        stats = {
            "obras_em_andamento": obras_em_andamento,
            "custo_total_mes_corrente": custo_total_mes_corrente,
            "total_funcionarios": total_funcionarios
        }
        return Response(stats)

class RelatorioDesempenhoEquipeView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, *args, **kwargs):
        equipe_id_str = request.query_params.get('equipe_id')
        data_inicio_str = request.query_params.get('data_inicio')
        data_fim_str = request.query_params.get('data_fim')
        if not equipe_id_str:
            return Response({"error": "Parâmetro equipe_id é obrigatório."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            equipe_id = int(equipe_id_str)
        except ValueError:
            return Response({"error": "Parâmetro equipe_id deve ser um número inteiro."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            equipe = Equipe.objects.get(pk=equipe_id)
        except Equipe.DoesNotExist:
            return Response({"error": f"Equipe com id {equipe_id} não encontrada."}, status=status.HTTP_404_NOT_FOUND)
        filters = Q(equipe_id=equipe_id)
        applied_filters_echo = {"equipe_id": equipe_id, "nome_equipe": equipe.nome_equipe}
        if data_inicio_str:
            try:
                data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
                filters &= Q(data_locacao_inicio__gte=data_inicio)
                applied_filters_echo["data_inicio"] = data_inicio_str
            except ValueError:
                return Response({"error": "Formato inválido para data_inicio (esperado YYYY-MM-DD)."}, status=status.HTTP_400_BAD_REQUEST)
        if data_fim_str:
            try:
                data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
                filters &= Q(Q(data_locacao_fim__lte=data_fim) | Q(data_locacao_fim__isnull=True))
                applied_filters_echo["data_fim"] = data_fim_str
            except ValueError:
                return Response({"error": "Formato inválido para data_fim (esperado YYYY-MM-DD)."}, status=status.HTTP_400_BAD_REQUEST)
        if data_inicio_str and data_fim_str and data_inicio > data_fim: # type: ignore
            return Response({"error": "A data_inicio não pode ser posterior à data_fim."}, status=status.HTTP_400_BAD_REQUEST)
        alocacoes = Locacao_Obras_Equipes.objects.filter(filters).select_related('obra').order_by('data_locacao_inicio')
        data = []
        for alocacao in alocacoes:
            data.append({
                "id": alocacao.id, "obra_id": alocacao.obra.id, "obra_nome": alocacao.obra.nome_obra,
                "equipe_id": alocacao.equipe.id, "equipe_nome": alocacao.equipe.nome_equipe,
                "data_locacao_inicio": alocacao.data_locacao_inicio, "data_locacao_fim": alocacao.data_locacao_fim,
            })
        return Response({"filtros": applied_filters_echo, "alocacoes": data})

class RelatorioCustoGeralView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, *args, **kwargs):
        data_inicio_str = request.query_params.get('data_inicio')
        data_fim_str = request.query_params.get('data_fim')
        if not data_inicio_str or not data_fim_str:
            return Response({"error": "Parâmetros data_inicio e data_fim são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
            data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
        except ValueError:
            return Response({"error": "Formato inválido para datas (esperado YYYY-MM-DD)."}, status=status.HTTP_400_BAD_REQUEST)
        if data_inicio > data_fim:
            return Response({"error": "A data_inicio não pode ser posterior à data_fim."}, status=status.HTTP_400_BAD_REQUEST)
        applied_filters_echo = {"data_inicio": data_inicio_str, "data_fim": data_fim_str}
        total_compras = Compra.objects.filter(data_compra__gte=data_inicio, data_compra__lte=data_fim).aggregate(total=Sum('valor_total_liquido', output_field=DecimalField()))['total'] or Decimal('0.00')
        total_despesas_extras = Despesa_Extra.objects.filter(data__gte=data_inicio, data__lte=data_fim).aggregate(total=Sum('valor', output_field=DecimalField()))['total'] or Decimal('0.00')
        custo_consolidado_total = total_compras + total_despesas_extras
        return Response({
            "filtros": applied_filters_echo, "total_compras": total_compras,
            "total_despesas_extras": total_despesas_extras, "custo_consolidado_total": custo_consolidado_total
        })

from django.db.models.functions import TruncMonth
class ObraHistoricoCustosView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, pk, format=None):
        try:
            obra = Obra.objects.get(pk=pk)
        except Obra.DoesNotExist:
            return Response({"error": "Obra não encontrada."}, status=status.HTTP_404_NOT_FOUND)
        custos_compras = Compra.objects.filter(obra=obra).annotate(mes=TruncMonth('data_compra')).values('mes').annotate(total_compras=Sum('valor_total_liquido')).order_by('mes')
        custos_despesas = Despesa_Extra.objects.filter(obra=obra).annotate(mes=TruncMonth('data')).values('mes').annotate(total_despesas=Sum('valor')).order_by('mes')
        historico = {}
        for compra in custos_compras:
            if compra['mes'] is None: continue
            mes_str = compra['mes'].strftime('%Y-%m')
            if mes_str not in historico: historico[mes_str] = {'compras': Decimal('0.00'), 'despesas_extras': Decimal('0.00')}
            historico[mes_str]['compras'] += compra['total_compras'] or Decimal('0.00')
        for despesa in custos_despesas:
            if despesa['mes'] is None: continue
            mes_str = despesa['mes'].strftime('%Y-%m')
            if mes_str not in historico: historico[mes_str] = {'compras': Decimal('0.00'), 'despesas_extras': Decimal('0.00')}
            historico[mes_str]['despesas_extras'] += despesa['total_despesas'] or Decimal('0.00')
        resultado_final = []
        for mes, totais in sorted(historico.items()):
            resultado_final.append({
                'mes': mes, 'total_custo_compras': totais['compras'],
                'total_custo_despesas': totais['despesas_extras'],
                'total_geral_mes': totais['compras'] + totais['despesas_extras']
            })
        return Response(resultado_final)

class ObraCustosPorCategoriaView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, pk, format=None):
        try:
            obra = Obra.objects.get(pk=pk)
        except Obra.DoesNotExist:
            return Response({"error": "Obra não encontrada."}, status=status.HTTP_404_NOT_FOUND)
        custos_por_categoria = Despesa_Extra.objects.filter(obra=obra).values('categoria').annotate(total_valor=Sum('valor')).order_by('-total_valor')
        resultado_formatado = [{'name': item['categoria'], 'value': item['total_valor'] or Decimal('0.00')} for item in custos_por_categoria if item['total_valor'] is not None]
        return Response(resultado_formatado)

from collections import defaultdict
from django.utils.dateparse import parse_date

class RelatorioFolhaPagamentoViewSet(viewsets.ViewSet):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    @action(detail=False, methods=['get'], url_path='pre_check_dias_sem_locacoes')
    def pre_check_dias_sem_locacoes(self, request):
        start_date_str = request.query_params.get('start_date')
        end_date_str = request.query_params.get('end_date')
        if not start_date_str or not end_date_str: return Response({"error": "Parâmetros start_date e end_date são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            start_date = date.fromisoformat(start_date_str)
            end_date = date.fromisoformat(end_date_str)
        except ValueError: return Response({"error": "Formato de data inválido. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)
        if start_date > end_date: return Response({"error": "start_date não pode ser posterior a end_date."}, status=status.HTTP_400_BAD_REQUEST)
        all_dates_in_range = set()
        current_date = start_date
        while current_date <= end_date:
            all_dates_in_range.add(current_date)
            current_date += timedelta(days=1)
        locacoes_dates_qs = Locacao_Obras_Equipes.objects.filter(data_locacao_inicio__gte=start_date, data_locacao_inicio__lte=end_date, status_locacao='ativa').values_list('data_locacao_inicio', flat=True).distinct()
        locacoes_dates_set = set(locacoes_dates_qs)
        dias_sem_locacoes = sorted([dt.isoformat() for dt in (all_dates_in_range - locacoes_dates_set)])
        medicoes_pendentes_qs = Locacao_Obras_Equipes.objects.filter(
            Q(data_locacao_inicio__gte=start_date) & Q(data_locacao_inicio__lte=end_date) &
            Q(status_locacao='ativa') & (Q(valor_pagamento__isnull=True) | Q(valor_pagamento=Decimal('0.00')))
        ).select_related('obra', 'funcionario_locado', 'equipe')
        medicoes_pendentes_list = []
        for loc in medicoes_pendentes_qs:
            recurso_locado_str = "Serviço Externo"
            if loc.funcionario_locado: recurso_locado_str = f"Funcionário: {loc.funcionario_locado.nome_completo}"
            elif loc.equipe: recurso_locado_str = f"Equipe: {loc.equipe.nome_equipe}"
            elif loc.servico_externo: recurso_locado_str = f"Serviço Externo: {loc.servico_externo}"
            medicoes_pendentes_list.append({
                'locacao_id': loc.id, 'obra_nome': loc.obra.nome_obra if loc.obra else "Obra não especificada",
                'recurso_locado': recurso_locado_str, 'data_inicio': loc.data_locacao_inicio.isoformat(),
                'tipo_pagamento': loc.get_tipo_pagamento_display(), 'valor_pagamento': loc.valor_pagamento
            })
        return Response({'dias_sem_locacoes': dias_sem_locacoes, 'medicoes_pendentes': medicoes_pendentes_list})

    @action(detail=False, methods=['get'], url_path='generate_report')
    def generate_report(self, request):
        start_date_str = request.query_params.get('start_date')
        end_date_str = request.query_params.get('end_date')
        if not start_date_str or not end_date_str: return Response({"error": "Parâmetros start_date e end_date são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            start_date = date.fromisoformat(start_date_str)
            end_date = date.fromisoformat(end_date_str)
        except ValueError: return Response({"error": "Formato de data inválido. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)
        if start_date > end_date: return Response({"error": "start_date não pode ser posterior a end_date."}, status=status.HTTP_400_BAD_REQUEST)
        locacoes_periodo = Locacao_Obras_Equipes.objects.filter(
            Q(data_locacao_inicio__gte=start_date) & Q(data_locacao_inicio__lte=end_date) &
            (Q(data_pagamento__isnull=True) | Q(data_pagamento__lte=end_date)) &
            (Q(funcionario_locado__isnull=False) | Q(equipe__isnull=False) | (Q(servico_externo__isnull=False) & ~Q(servico_externo=''))) &
            Q(status_locacao='ativa') & Q(valor_pagamento__isnull=False) & Q(valor_pagamento__gt=Decimal('0.00'))
        ).select_related('obra', 'funcionario_locado', 'equipe')
        report_data_by_obra = defaultdict(lambda: {"obra_id": None, "obra_nome": "", "dias": defaultdict(lambda: {"data": None, "locacoes_no_dia": [], "total_dia_obra": Decimal('0.00')}), "total_obra_periodo": Decimal('0.00')})
        def get_recurso_nome(locacao_instance):
            if locacao_instance.funcionario_locado: return f"Funcionário: {locacao_instance.funcionario_locado.nome_completo}"
            elif locacao_instance.equipe: return f"Equipe: {locacao_instance.equipe.nome_equipe}"
            elif locacao_instance.servico_externo: return f"Serviço Externo: {locacao_instance.servico_externo}"
            return "N/A"
        for locacao in locacoes_periodo:
            obra = locacao.obra
            if not obra: continue
            effective_start_date = max(locacao.data_locacao_inicio, start_date)
            effective_end_date = min(locacao.data_locacao_fim, end_date) # type: ignore
            current_day_in_loop = effective_start_date
            while current_day_in_loop <= effective_end_date:
                daily_cost_for_locacao = Decimal('0.00')
                if locacao.tipo_pagamento == 'diaria': daily_cost_for_locacao = locacao.valor_pagamento # type: ignore
                elif locacao.tipo_pagamento in ['metro', 'empreitada']:
                    if locacao.data_locacao_inicio == current_day_in_loop: daily_cost_for_locacao = locacao.valor_pagamento # type: ignore
                if daily_cost_for_locacao > Decimal('0.00'):
                    if report_data_by_obra[obra.id]["obra_id"] is None:
                        report_data_by_obra[obra.id]["obra_id"] = obra.id
                        report_data_by_obra[obra.id]["obra_nome"] = obra.nome_obra
                    day_iso = current_day_in_loop.isoformat()
                    day_data_dict = report_data_by_obra[obra.id]["dias"][day_iso]
                    if day_data_dict["data"] is None: day_data_dict["data"] = day_iso
                    day_data_dict["locacoes_no_dia"].append({
                        "locacao_id": locacao.id, "recurso_nome": get_recurso_nome(locacao),
                        "tipo_pagamento_display": locacao.get_tipo_pagamento_display(),
                        "valor_diario_atribuido": str(daily_cost_for_locacao),
                        "valor_pagamento_total_locacao": str(locacao.valor_pagamento),
                        "data_locacao_original_inicio": locacao.data_locacao_inicio.isoformat(),
                        "data_locacao_original_fim": locacao.data_locacao_fim.isoformat() if locacao.data_locacao_fim else None, # type: ignore
                        "data_pagamento_prevista": locacao.data_pagamento.isoformat() if locacao.data_pagamento else None,
                    })
                    day_data_dict["total_dia_obra"] += daily_cost_for_locacao
                    report_data_by_obra[obra.id]["total_obra_periodo"] += daily_cost_for_locacao
                current_day_in_loop += timedelta(days=1)
        final_report_list = []
        sorted_obra_ids = sorted(report_data_by_obra.keys(), key=lambda obra_id_key: report_data_by_obra[obra_id_key]["obra_nome"])
        for obra_id_key in sorted_obra_ids:
            obra_data = report_data_by_obra[obra_id_key]
            sorted_dias_keys = sorted(obra_data["dias"].keys())
            dias_list = []
            for day_key in sorted_dias_keys:
                dia_info = obra_data["dias"][day_key]
                dia_info["total_dia_obra"] = str(dia_info["total_dia_obra"])
                dia_info["locacoes_no_dia"].sort(key=lambda x: x["recurso_nome"])
                dias_list.append(dia_info)
            final_report_list.append({
                "obra_id": obra_data["obra_id"], "obra_nome": obra_data["obra_nome"],
                "dias": dias_list, "total_obra_periodo": str(obra_data["total_obra_periodo"])
            })
        return Response(final_report_list)

class RelatorioPagamentoMateriaisViewSet(viewsets.ViewSet):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    @action(detail=False, methods=['get'], url_path='pre-check')
    def pre_check_pagamentos_materiais(self, request):
        start_date_str = request.query_params.get('start_date')
        end_date_str = request.query_params.get('end_date')
        obra_id_str = request.query_params.get('obra_id')
        fornecedor_str = request.query_params.get('fornecedor')
        if not start_date_str or not end_date_str: return Response({"error": "Parâmetros start_date e end_date são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            start_date = parse_date(start_date_str) # type: ignore
            end_date = parse_date(end_date_str) # type: ignore
            if not start_date or not end_date: raise ValueError("Invalid date format")
        except ValueError: return Response({"error": "Formato de data inválido. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)
        filters = Q(data_compra__gte=start_date) & Q(data_compra__lte=end_date)
        if obra_id_str: filters &= Q(obra_id=obra_id_str)
        if fornecedor_str: filters &= Q(fornecedor__icontains=fornecedor_str)
        compras_no_periodo = Compra.objects.filter(filters).select_related('obra')
        compras_pagamento_pendente = []
        for compra in compras_no_periodo:
            if compra.data_pagamento is None or compra.data_pagamento > end_date: # type: ignore
                compras_pagamento_pendente.append(CompraReportSerializer(compra).data)
        return Response({
            'compras_com_pagamento_pendente_ou_futuro': compras_pagamento_pendente,
            'message': "Listagem de compras no período com pagamento ainda não registrado ou agendado para após o período do relatório."
        })

    @action(detail=False, methods=['get'], url_path='generate')
    def gerar_relatorio_pagamentos_materiais(self, request):
        start_date_str = request.query_params.get('start_date')
        end_date_str = request.query_params.get('end_date')
        obra_id_str = request.query_params.get('obra_id')
        fornecedor_str = request.query_params.get('fornecedor')
        if not start_date_str or not end_date_str: return Response({"error": "Parâmetros start_date e end_date são obrigatórios."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            start_date = parse_date(start_date_str) # type: ignore
            end_date = parse_date(end_date_str) # type: ignore
            if not start_date or not end_date: raise ValueError("Invalid date format")
        except ValueError: return Response({"error": "Formato de data inválido. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)
        filters = Q(data_compra__gte=start_date) & Q(data_compra__lte=end_date)
        if obra_id_str: filters &= Q(obra_id=obra_id_str)
        if fornecedor_str: filters &= Q(fornecedor__icontains=fornecedor_str)
        compras_do_periodo = Compra.objects.filter(filters).select_related('obra').order_by('obra__nome_obra', 'fornecedor', 'data_compra', 'data_pagamento')
        report = defaultdict(lambda: {"obra_id": None, "obra_nome": "", "fornecedores": defaultdict(lambda: {"fornecedor_nome": "", "compras_a_pagar": [], "total_fornecedor_na_obra": Decimal('0.00')}), "total_obra": Decimal('0.00')})
        grand_total = Decimal('0.00')
        for compra_item in compras_do_periodo: # Renamed 'compra' to 'compra_item' to avoid conflict
            obra_data = report[compra_item.obra.id]
            if obra_data["obra_id"] is None:
                obra_data["obra_id"] = compra_item.obra.id
                obra_data["obra_nome"] = compra_item.obra.nome_obra
            fornecedor_data = obra_data["fornecedores"][compra_item.fornecedor or "N/A"]
            if not fornecedor_data["fornecedor_nome"]: fornecedor_data["fornecedor_nome"] = compra_item.fornecedor or "N/A"
            compra_detail = CompraReportSerializer(compra_item).data
            fornecedor_data["compras_a_pagar"].append(compra_detail)
            valor_liquido = compra_item.valor_total_liquido or Decimal('0.00')
            fornecedor_data["total_fornecedor_na_obra"] += valor_liquido
            obra_data["total_obra"] += valor_liquido
            grand_total += valor_liquido
        final_report_list = []
        for obra_id_key in sorted(report.keys(), key=lambda ok: report[ok]["obra_nome"]):
            obra_item = report[obra_id_key]
            sorted_fornecedor_keys = sorted(obra_item["fornecedores"].keys())
            fornecedores_list = []
            for forn_key in sorted_fornecedor_keys:
                forn_data = obra_item["fornecedores"][forn_key]
                forn_data["total_fornecedor_na_obra"] = str(forn_data["total_fornecedor_na_obra"])
                fornecedores_list.append(forn_data)
            obra_item["fornecedores"] = fornecedores_list
            obra_item["total_obra"] = str(obra_item["total_obra"])
            final_report_list.append(obra_item)
        return Response({"report_data": final_report_list, "total_geral_relatorio": str(grand_total)})

class FotoObraViewSet(viewsets.ModelViewSet):
    queryset = FotoObra.objects.all().order_by('-uploaded_at')
    serializer_class = FotoObraSerializer
    permission_classes = [permissions.IsAuthenticated]
    parser_classes = (MultiPartParser, FormParser)
    def get_queryset(self):
        obra_id = self.request.query_params.get('obra_id')
        if obra_id: return self.queryset.filter(obra__id=obra_id)
        return self.queryset
    def create(self, request, *args, **kwargs):
        final_data = request.POST.copy()
        if 'obra_id' in final_data and 'obra' not in final_data:
            final_data['obra'] = final_data.pop('obra_id')
        for key, file_obj in request.FILES.items():
            final_data[key] = file_obj
        serializer = self.get_serializer(data=final_data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
    def perform_create(self, serializer):
        serializer.save()

class ObraCustosPorMaterialView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]
    def get(self, request, pk, format=None):
        try:
            obra = Obra.objects.get(pk=pk)
        except Obra.DoesNotExist:
            return Response({"error": "Obra não encontrada."}, status=status.HTTP_404_NOT_FOUND)
        custos_por_material = ItemCompra.objects.filter(compra__obra=obra).values('material__nome').annotate(total_custo=Sum('valor_total_item')).order_by('-total_custo')
        resultado_formatado = [
            {'name': item['material__nome'], 'value': item['total_custo'] or Decimal('0.00')}
            for item in custos_por_material
            if item['material__nome'] is not None and item['total_custo'] is not None
        ]
        return Response(resultado_formatado)

# print("DEBUG: CompraViewSet logic updated.") # This line was the end of the original backup file before placeholder.

# --- New PDF Generation View ---
# (The placeholder GerarRelatorioPDFObraView and its specific imports from django.http.HttpResponse
#  and django.template.loader.render_to_string that were at the end of the backup file are now effectively replaced by this)
class GerarRelatorioPDFObraView(APIView):
    permission_classes = [IsNivelAdmin | IsNivelGerente]

    def get(self, request, pk, format=None):
        try:
            obra = Obra.objects.select_related('responsavel').get(pk=pk)
        except Obra.DoesNotExist:
            raise Http404("Obra não encontrada")

        compras = Compra.objects.filter(obra=obra).prefetch_related('itens__material').order_by('data_compra', 'nota_fiscal')
        despesas_extras = Despesa_Extra.objects.filter(obra=obra).order_by('data')
        locacoes = Locacao_Obras_Equipes.objects.filter(obra=obra).select_related(
            'equipe__lider',
            'funcionario_locado'
        ).prefetch_related(
            'equipe__membros'
        ).order_by('data_locacao_inicio')
        fotos_qs = FotoObra.objects.filter(obra=obra).order_by('uploaded_at') # Renamed to fotos_qs to avoid confusion

        fotos_for_context = []
        if fotos_qs: # Use fotos_qs here
            print(f"DEBUG PDF IMG: Found {len(fotos_qs)} photo(s) for Obra ID {obra.id}")
            for foto_obj in fotos_qs: # Iterate over fotos_qs
                try:
                    abs_path = foto_obj.imagem.path
                    # Replace backslashes with forward slashes for file URI
                    path_with_fwd_slashes = abs_path.replace('\\', '/')
                    file_uri = f"file:///{path_with_fwd_slashes}"
                    fotos_for_context.append({
                        'uri': file_uri,
                        'description': foto_obj.descricao, # Matching template change
                        'original_path': abs_path
                    })
                    print(f"DEBUG PDF IMG: Processed foto. Original path: {abs_path}, URI for PDF: {file_uri}")
                except Exception as e_img:
                    print(f"DEBUG PDF IMG: Error processing image {getattr(foto_obj, 'id', 'N/A')}: {e_img}")

        # Old debug block is now removed by this replacement.

        custo_total_materiais = sum(c.valor_total_liquido for c in compras if c.valor_total_liquido) or Decimal('0.00')
        custo_total_despesas_extras = sum(de.valor for de in despesas_extras if de.valor) or Decimal('0.00')
        custo_total_locacoes = sum(loc.valor_pagamento for loc in locacoes if loc.valor_pagamento) or Decimal('0.00')

        custo_total_realizado = custo_total_materiais + custo_total_despesas_extras + custo_total_locacoes
        balanco_financeiro = (obra.orcamento_previsto or Decimal('0.00')) - custo_total_realizado

        custo_por_m2 = Decimal('0.00')
        if obra.area_metragem and obra.area_metragem > 0: # type: ignore
            custo_por_m2 = custo_total_realizado / obra.area_metragem # type: ignore

        context = {
            'obra': obra,
            'compras': compras,
            'despesas_extras': despesas_extras,
            'locacoes': locacoes,
            'fotos': fotos_for_context, # Use the new list with processed URIs
            'data_emissao': timezone.now(),
            'custo_total_materiais': custo_total_materiais,
            'custo_total_despesas_extras': custo_total_despesas_extras,
            'custo_total_locacoes': custo_total_locacoes,
            'custo_total_realizado': custo_total_realizado,
            'balanco_financeiro': balanco_financeiro,
            'custo_por_m2': custo_por_m2,
            'MEDIA_ROOT': settings.MEDIA_ROOT, # MEDIA_ROOT is still useful for other things or if some images are still direct
        }

        html_string = render_to_string('relatorios/relatorio_obra.html', context)

        css_file_path = os.path.join(settings.BASE_DIR, 'core', 'static', 'css', 'relatorio_obra.css')

        stylesheets = []
        if os.path.exists(css_file_path):
            stylesheets.append(CSS(filename=css_file_path))
        else:
            print(f"WARNING: PDF CSS file not found at {css_file_path}")

        html_obj = HTML(string=html_string, base_url=request.build_absolute_uri('/'))
        pdf_file = html_obj.write_pdf(stylesheets=stylesheets)

        response = HttpResponse(pdf_file, content_type='application/pdf')
        clean_obra_nome = "".join([c if c.isalnum() else "_" for c in obra.nome_obra])
        response['Content-Disposition'] = f'attachment; filename="Relatorio_Obra_{clean_obra_nome}_{obra.id}.pdf"'

        return response
