// üß™ SCRIPT DE TESTE PARA VALIDA√á√ÉO DE COMPRA
// Execute este script no console do navegador na p√°gina: http://localhost:5173/compras/nova

console.log('üß™ INICIANDO TESTE DE VALIDA√á√ÉO DE COMPRA');

// Fun√ß√£o para aguardar um elemento aparecer
function waitForElement(selector, timeout = 5000) {
    return new Promise((resolve, reject) => {
        const element = document.querySelector(selector);
        if (element) {
            resolve(element);
            return;
        }
        
        const observer = new MutationObserver(() => {
            const element = document.querySelector(selector);
            if (element) {
                observer.disconnect();
                resolve(element);
            }
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        setTimeout(() => {
            observer.disconnect();
            reject(new Error(`Elemento ${selector} n√£o encontrado em ${timeout}ms`));
        }, timeout);
    });
}

// Fun√ß√£o para aguardar um tempo
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para simular clique
function clickElement(element) {
    element.click();
    element.dispatchEvent(new Event('click', { bubbles: true }));
}

// Fun√ß√£o para preencher campo
function fillField(selector, value) {
    const field = document.querySelector(selector);
    if (field) {
        field.value = value;
        field.dispatchEvent(new Event('input', { bubbles: true }));
        field.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`‚úÖ Campo ${selector} preenchido com: ${value}`);
        return true;
    }
    console.log(`‚ùå Campo ${selector} n√£o encontrado`);
    return false;
}

// Fun√ß√£o para verificar se h√° mensagens de erro
function checkForErrors() {
    const errors = [];
    
    // Procurar por mensagens de erro comuns
    const errorSelectors = [
        '.error-message',
        '.text-red-500',
        '.text-red-600',
        '.border-red-500',
        '[class*="error"]',
        '[class*="invalid"]'
    ];
    
    errorSelectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
            if (el.textContent.trim()) {
                errors.push({
                    selector,
                    text: el.textContent.trim(),
                    element: el
                });
            }
        });
    });
    
    return errors;
}

// Fun√ß√£o principal de teste
async function runValidationTests() {
    console.log('üîç TESTE 1: Tentando salvar compra completamente vazia');
    
    try {
        // Aguardar o bot√£o de salvar aparecer
        const saveButton = await waitForElement('button[type="submit"], button:contains("Salvar")');
        console.log('‚úÖ Bot√£o de salvar encontrado');
        
        // Limpar console para ver apenas os logs do teste
        console.clear();
        console.log('üß™ INICIANDO TESTE - COMPRA VAZIA');
        
        // Tentar salvar sem preencher nada
        clickElement(saveButton);
        
        // Aguardar um pouco para a valida√ß√£o processar
        await sleep(1000);
        
        // Verificar erros
        const errors = checkForErrors();
        console.log('üîç Erros encontrados:', errors);
        
        if (errors.length > 0) {
            console.log('‚úÖ TESTE 1 PASSOU: Valida√ß√£o impediu salvar compra vazia');
            errors.forEach(error => {
                console.log(`   - ${error.text}`);
            });
        } else {
            console.log('‚ùå TESTE 1 FALHOU: Nenhum erro de valida√ß√£o encontrado!');
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
    
    console.log('\nüîç TESTE 2: Preenchendo campos obrigat√≥rios, mas deixando itens vazios');
    
    try {
        // Tentar preencher obra (assumindo que h√° um select)
        const obraSelect = document.querySelector('select[name="obra"], select:first-of-type');
        if (obraSelect && obraSelect.options.length > 1) {
            obraSelect.selectedIndex = 1;
            obraSelect.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('‚úÖ Obra selecionada');
        }
        
        // Tentar preencher data
        fillField('input[type="date"], input[name*="data"]', '2024-01-15');
        
        // Aguardar um pouco
        await sleep(500);
        
        // Limpar console novamente
        console.clear();
        console.log('üß™ TESTE 2 - COMPRA SEM ITENS V√ÅLIDOS');
        
        // Tentar salvar
        const saveButton2 = document.querySelector('button[type="submit"], button:contains("Salvar")');
        if (saveButton2) {
            clickElement(saveButton2);
        }
        
        // Aguardar valida√ß√£o
        await sleep(1000);
        
        // Verificar erros
        const errors2 = checkForErrors();
        console.log('üîç Erros encontrados:', errors2);
        
        // Verificar se h√° mensagem espec√≠fica sobre itens
        const hasItemError = errors2.some(error => 
            error.text.toLowerCase().includes('item') || 
            error.text.toLowerCase().includes('produto') ||
            error.text.toLowerCase().includes('material')
        );
        
        if (hasItemError) {
            console.log('‚úÖ TESTE 2 PASSOU: Valida√ß√£o impediu salvar compra sem itens v√°lidos');
        } else {
            console.log('‚ùå TESTE 2 FALHOU: N√£o encontrou erro espec√≠fico sobre itens!');
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste 2:', error);
    }
    
    console.log('\nüéØ TESTES CONCLU√çDOS');
    console.log('üìã Verifique os logs acima para ver se a valida√ß√£o est√° funcionando corretamente.');
    console.log('üîç Observe tamb√©m os logs com üîç VALIDA√á√ÉO e üöÄ SUBMIT que devem aparecer.');
}

// Executar os testes
runValidationTests().catch(console.error);

// Tamb√©m disponibilizar fun√ß√µes individuais para teste manual
window.testValidation = {
    runTests: runValidationTests,
    checkErrors: checkForErrors,
    fillField: fillField,
    clickSave: () => {
        const saveButton = document.querySelector('button[type="submit"], button:contains("Salvar")');
        if (saveButton) {
            clickElement(saveButton);
            console.log('üîÑ Bot√£o salvar clicado');
        } else {
            console.log('‚ùå Bot√£o salvar n√£o encontrado');
        }
    }
};

console.log('\nüõ†Ô∏è FUN√á√ïES DISPON√çVEIS:');
console.log('- testValidation.runTests() - Executar todos os testes');
console.log('- testValidation.checkErrors() - Verificar erros na tela');
console.log('- testValidation.clickSave() - Clicar no bot√£o salvar');
console.log('- testValidation.fillField(selector, value) - Preencher campo');