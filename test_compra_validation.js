// Script para testar valida√ß√£o do CompraForm no console do navegador
// Cole este c√≥digo no console do navegador na p√°gina de nova compra

console.log('üß™ Iniciando teste de valida√ß√£o do CompraForm...');

// Fun√ß√£o para simular preenchimento de campos
function preencherCampo(selector, valor) {
  const campo = document.querySelector(selector);
  if (campo) {
    campo.value = valor;
    campo.dispatchEvent(new Event('input', { bubbles: true }));
    campo.dispatchEvent(new Event('change', { bubbles: true }));
    console.log(`‚úÖ Campo ${selector} preenchido com: ${valor}`);
  } else {
    console.log(`‚ùå Campo ${selector} n√£o encontrado`);
  }
}

// Fun√ß√£o para clicar em bot√£o
function clicarBotao(selector) {
  const botao = document.querySelector(selector);
  if (botao) {
    botao.click();
    console.log(`‚úÖ Bot√£o ${selector} clicado`);
    return true;
  } else {
    console.log(`‚ùå Bot√£o ${selector} n√£o encontrado`);
    return false;
  }
}

// Fun√ß√£o para verificar mensagens de erro
function verificarErros() {
  const erros = document.querySelectorAll('[role="alert"], .text-red-600, .text-red-700');
  console.log(`üîç Encontrados ${erros.length} elementos de erro:`);
  erros.forEach((erro, index) => {
    console.log(`  ${index + 1}. ${erro.textContent.trim()}`);
  });
  return erros.length > 0;
}

// Fun√ß√£o para verificar se h√° itens na tabela
function verificarItens() {
  const linhasItens = document.querySelectorAll('tbody tr');
  console.log(`üìã Encontradas ${linhasItens.length} linhas de itens`);
  return linhasItens.length;
}

// Teste 1: Tentar salvar sem preencher nada
async function teste1() {
  console.log('\nüß™ TESTE 1: Salvar compra completamente vazia');
  
  // Verificar se h√° itens
  const numItens = verificarItens();
  console.log(`N√∫mero de itens: ${numItens}`);
  
  // Tentar salvar
  const salvou = clicarBotao('button[type="submit"]');
  
  if (salvou) {
    // Aguardar um pouco para a valida√ß√£o processar
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Verificar se apareceram erros
    const temErros = verificarErros();
    
    if (temErros) {
      console.log('‚úÖ TESTE 1 PASSOU: Valida√ß√£o impediu salvar compra vazia');
    } else {
      console.log('‚ùå TESTE 1 FALHOU: Compra vazia foi salva sem valida√ß√£o!');
    }
  }
}

// Teste 2: Preencher campos obrigat√≥rios mas sem itens
async function teste2() {
  console.log('\nüß™ TESTE 2: Salvar com campos obrigat√≥rios mas sem itens');
  
  // Preencher obra (se houver select)
  const selectObra = document.querySelector('select[name="obraId"]');
  if (selectObra && selectObra.options.length > 1) {
    selectObra.selectedIndex = 1;
    selectObra.dispatchEvent(new Event('change', { bubbles: true }));
    console.log('‚úÖ Obra selecionada');
  }
  
  // Preencher data da compra
  preencherCampo('input[name="dataCompra"]', '2024-01-15');
  
  // Tentar salvar
  const salvou = clicarBotao('button[type="submit"]');
  
  if (salvou) {
    await new Promise(resolve => setTimeout(resolve, 1000));
    const temErros = verificarErros();
    
    if (temErros) {
      console.log('‚úÖ TESTE 2 PASSOU: Valida√ß√£o impediu salvar sem itens');
    } else {
      console.log('‚ùå TESTE 2 FALHOU: Compra sem itens foi salva!');
    }
  }
}

// Teste 3: Adicionar item vazio e tentar salvar
async function teste3() {
  console.log('\nüß™ TESTE 3: Adicionar item vazio e tentar salvar');
  
  // Adicionar novo item
  const adicionou = clicarBotao('button:contains("Adicionar Novo Item"), button[class*="green"]');
  
  if (adicionou) {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Verificar se item foi adicionado
    const numItens = verificarItens();
    console.log(`Itens ap√≥s adicionar: ${numItens}`);
    
    // Tentar salvar com item vazio
    const salvou = clicarBotao('button[type="submit"]');
    
    if (salvou) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      const temErros = verificarErros();
      
      if (temErros) {
        console.log('‚úÖ TESTE 3 PASSOU: Valida√ß√£o impediu salvar com item vazio');
      } else {
        console.log('‚ùå TESTE 3 FALHOU: Item vazio foi aceito!');
      }
    }
  }
}

// Executar todos os testes
async function executarTestes() {
  console.log('üöÄ Iniciando bateria de testes de valida√ß√£o...');
  
  await teste1();
  await teste2();
  await teste3();
  
  console.log('\nüèÅ Testes conclu√≠dos!');
  console.log('\nüìã RESUMO:');
  console.log('- Se todos os testes PASSARAM: a valida√ß√£o est√° funcionando');
  console.log('- Se algum teste FALHOU: h√° problema na valida√ß√£o');
}

// Executar automaticamente
executarTestes();

// Tamb√©m disponibilizar fun√ß√µes individuais
window.testeValidacao = {
  executarTodos: executarTestes,
  teste1,
  teste2,
  teste3,
  verificarErros,
  verificarItens
};